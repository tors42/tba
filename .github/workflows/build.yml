# Workflow which will build tba and "cross-compile"/jlink it for multiple OS and architectures
name: build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
        type: string

jobs:
  jlink:
    env:
      JDK_BASE_URL: "https://download.java.net/java/GA/jdk23.0.2/6da2a6609d6e406f85c491fcb119101b/7/GPL/"
      build_os: linux
      build_arch: x64
      build_pkg: tar.gz

    strategy:
      matrix:
        os:    [linux, windows, macos]
        arch:  [aarch64, x64]
        include:
          - os: linux
            pkg: tar.gz
          - os: windows
            pkg: zip
          - os: macos
            pkg: tar.gz
        exclude:
          - os: windows
            arch: aarch64

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download target OS+Arch JDK
        run: curl --output ${{ runner.temp }}/jdk.${{ matrix.pkg }} ${{ env.JDK_BASE_URL }}/openjdk-23.0.2_${{ matrix.os }}-${{ matrix.arch }}_bin.${{ matrix.pkg }}

      - name: Extract zip target JDK
        if: ${{ matrix.pkg == 'zip' }}
        run: |
          mkdir ${{ runner.temp }}/targetjdk
          unzip ${{ runner.temp }}/jdk.${{ matrix.pkg }} -d ${{ runner.temp }}/targetjdk

      - name: Extract tar.gz target JDK
        if: ${{ matrix.pkg != 'zip' }}
        run: |
          mkdir ${{ runner.temp }}/targetjdk
          tar xzf ${{ runner.temp }}/jdk.${{ matrix.pkg }} --directory ${{ runner.temp }}/targetjdk

      - name: Download build environment JDK
        run: curl --output ${{ runner.temp }}/buildjdk.${{ env.build_pkg }} ${{ env.JDK_BASE_URL }}/openjdk-23.0.2_${{ env.build_os }}-${{ env.build_arch }}_bin.${{ env.build_pkg }}

      - name: Extract tar.gz build JDK
        run: |
          mkdir ${{ runner.temp }}/buildjdk
          tar xzf ${{ runner.temp }}/buildjdk.${{ env.build_pkg }} --directory ${{ runner.temp }}/buildjdk


      - name: Run build
        run: |
          java="$(find ${{ runner.temp}}/buildjdk -name java)"
          version="${{ inputs.version }}"
          tstamp="$(git log -1 --format=%aI)"
          runtime="${{ matrix.os }}-${{ matrix.arch }}"
          jmods="$(dirname $(find ${{ runner.temp }}/targetjdk -name jmods))/jmods"
          cmd="$java --enable-preview build.java $version $tstamp $runtime $jmods"
          $java -Xinternalversion
          echo $cmd
          $cmd

      - name: Prepare directory to package
        run: mkdir to-package && mv out/runtime/${{ matrix.os }}-${{ matrix.arch }} to-package/tba-${{ inputs.version }}

      - name: Determine file type of packaged java binary
        run: file $(find to-package/ -regex ".*/bin/java\(.exe\)?$")

      # upload-artifact doesn't preserve the executable bit information of files,
      # so creating a zip file which preserves the executable bits,
      # and then tell upload-artifact to zip this zip file instead of the files within the zip... sigh.
      - name: Create zip, preserving executable bits
        run: cd to-package && zip -r tba-${{ inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.zip tba-${{ inputs.version }} && cd ..

      - uses: actions/upload-artifact@v4
        with:
          name: wrapped-zip-tba-${{ inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}
          path: to-package/tba-${{ inputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.zip
